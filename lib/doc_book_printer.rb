#!/usr/bin/ruby

require "rest"

class DocBookPrinter < Printer

  attr_accessor :output_dir

  def initialize
    super()
    @output_dir = "docbook"
    @xml_examples = Hash.new
    @xml_schemas = Hash.new
  end

  def do_prepare
    unless File.exists? @output_dir
      Dir.mkdir @output_dir
    end

    @index = File.new @output_dir + "/restdoc.xml", "w"
    @xml = Builder::XmlMarkup.new :target => @index, :indent => 2
    @xml.instruct! :xml, :version=>"1.0", :encoding=>"UTF-8"
    @xml.declare! :DOCTYPE, :appendix, :PUBLIC, "-//Novell//DTD NovDoc XML V1.0//EN", "novdocx.dtd" do |x|
      x.declare! :ENTITY, :%, :'NOVDOC.DEACTIVATE.IDREF', "IGNORE"
      x.declare! :ENTITY, :entities, :SYSTEM, "entity-decl.ent"
      x << "  %entities;\n"
    end

    @xml.comment! "This file was generated by restility at #{Time.now}"
  end

  def do_finish
    puts "Written #{@index.path}."
    @index.close
  end

  def print_section section
    if !section.root?
      tag = nil

      if (1..3).include? section.level
        tag = 'title'
      else
        tag = 'unknown'
        $stderr.puts "Unknown section level: #{section.level}"
      end

      @xml.tag! tag, section unless tag.nil?
    end

    section.print_children self
  end

  def print_request request
    @xml.variablelist do
      @xml.varlistentry do

        @xml.term do
          @xml.literal request.to_s
        end

        if !request.parameters.empty?
          @xml.p "Arguments:"
          @xml.ul do
            request.parameters.each do |p|
              @xml.li p.to_s
            end
          end
        end

        request.print_children self
      end
    end
  end

  def print_text text
    @xml.para do |p|
      text.text.each do |t|
        p << t << "\n"
      end
    end
  end

  def print_parameter parameter
  end

  def print_host host
    @xml.para "Host: " + host.name
  end

  def print_result result
    @xml.para "Result: " + result.name
  end
  
  def print_body body
    @xml.para "Body: " + body.name
  end

  def print_xmlresult result
    print_xml_links "Result", result.name, result.schema
  end

  def print_xmlbody body
    print_xml_links "Body", body.name, body.schema
  end

  def print_xml_links title, xmlname, schema
    example = xmlname + ".xml"
    if ( !schema || schema.empty? )
      schema = xmlname + ".xsd"
    end
    @xml_examples[ example ] = true
    @xml_schemas[ schema ] = true
    @xml.p do |p|
      p << title
      p << ": "
      has_example = XmlFile.exist? example
      has_schema = XmlFile.exist? schema
      if has_example
        @xml.a( "Example", "href" => example )
      end
      if has_schema
        p << " ";
        @xml.a( "Schema", "href" => schema )
      end
      if( !has_example && !has_schema )
        p << xmlname
      end
    end
  end

  def print_contents contents
    # empty, the content is generated by docbook itself
  end

  def print_version version
    @xml.para "API Version: " + version.to_s
  end

end
